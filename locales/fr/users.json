{
    "title": "Gestion des utilisateurs, groupes et des permissions de fichiers sous Linux",
    "date": "24/03/2025",
    "content": "<p>Dans tout système Linux, qu'il s'agisse d'un serveur, d'un poste de travail ou d'une machine virtuelle, la gestion des utilisateurs et des groupes est essentielle pour garantir la sécurité, l'organisation et le contrôle du système.<br>Par défaut, chaque système Linux fonctionne selon un paradigme multi-utilisateur, ce qui signifie que différentes personnes ou services peuvent accéder au système en même temps.<br>Pour maintenir l'intégrité du système, Linux utilise des mécanismes de gestion des utilisateurs et des groupes qui permettent d'attribuer des permissions, de suivre les accès et d'organiser les utilisateurs de manière à faciliter la gestion efficace des systèmes de grande taille.</p><p>Dans cet article, vous découvrirez les concepts clés et les étapes pratiques impliqués dans la gestion des utilisateurs et des groupes sur les systèmes Linux.<br>Vous verrez comment créer et modifier des utilisateurs et des groupes, attribuer des permissions et suivre les bonnes pratiques pour maintenir un système sécurisé et bien organisé.</p><h2>Comprendre les utilisateurs et groupes sous Linux</h2><h3>Que sont les utilisateurs sous Linux ?</h3><p>Sous Linux, un utilisateur fait référence à tout compte pouvant effectuer des opérations.<br>Chaque utilisateur est identifié de manière unique par un <strong>UID (User ID)</strong>, qui est une valeur numérique utilisée par le système pour référencer cet utilisateur.<br>Le principal objectif des utilisateurs est de séparer les droits d'accès et les permissions.<br>Il existe deux principaux types d'utilisateurs:</p><ul class=\"disc-list\"><li><strong>Utilisateurs système</strong>: Ce sont des comptes spéciaux créés par le système pour exécuter des services ou gérer des tâches système (<code>root</code>, <code>www-data</code>, <code>sys</code>, etc.).<br>Les utilisateurs système n'ont généralement pas d'accès de connexion mais peuvent posséder des fichiers ou exécuter des processus en arrière-plan.</li><li><strong>Utilisateurs réguliers</strong>: Ce sont les utilisateurs typiques du système qui ont un accès de connexion, un répertoire personnel et la capacité de créer des fichiers et d'exécuter des programmes.</li></ul><p>Dans la plupart des distributions Linux, lorsqu'un utilisateur est créé, un répertoire personnel lui est attribué (comme <code>/home/newuser</code>) ainsi qu'un shell par défaut (comme <code>/bin/bash</code>).</p><br><h3>Que sont les groupes sous Linux ?</h3><p>Un groupe sous Linux est un ensemble d'utilisateurs.<br>Les groupes sont utilisés pour organiser les utilisateurs de manière à simplifier la gestion des permissions.<br>Chaque utilisateur peut appartenir à un ou plusieurs groupes, et chaque fichier ou ressource sur un système Linux est associé à un groupe et à un propriétaire.<br>Lors de la gestion des permissions de fichiers, il devient plus facile d'accorder à un ensemble d'utilisateurs (ceux d'un groupe) l'accès à certains fichiers sans spécifier chaque utilisateur individuellement.<br>Il existe deux catégories de groupes:</p><ul class=\"disc-list\"><li><strong>Groupe primaire</strong>: Chaque utilisateur appartient à un groupe primaire.<br>Ce groupe est généralement créé lors de la création de l'utilisateur et, sauf indication contraire, partage généralement le même nom que l'utilisateur (un utilisateur <code>alice</code> aura un groupe primaire nommé <code>alice</code>).</li><li><strong>Groupes secondaires</strong>: Un utilisateur peut appartenir à plusieurs groupes supplémentaires, ce qui lui donne des permissions additionnelles pour des ressources ou tâches spécifiques.</li></ul><p>Par exemple, un utilisateur peut faire partie du groupe <code>developers</code> qui lui permet d'accéder à un répertoire ou un ensemble de fichiers particulier.<br>Cela rend la gestion des accès plus efficace que de gérer les permissions individuellement pour chaque utilisateur.</p><br><h3>Comprendre les IDs des utilisateurs et groupes</h3><p>Comme expliqué précédemment, chaque utilisateur est identifié de manière unique par un identifiant numérique <strong>(UID)</strong>.<br>Il en va de même pour les groupes <strong>(GID)</strong>.<br>Voici comment cela fonctionne:</p><ul class=\"disc-list\"><li><strong>UID (User ID)</strong>: Identifiant unique attribué à chaque utilisateur.<br>L'utilisateur <code>root</code> a l'UID 0, et les utilisateurs réguliers commencent généralement à partir de l'UID 1000.</li><li><strong>GID (Group ID)</strong>: De la même manière, chaque groupe a un identifiant unique.<br>Le groupe primaire d'un utilisateur a également son propre GID.</li></ul><p>La correspondance entre les utilisateurs, les groupes et les UIDs/GIDs est stockée dans le fichier <code>/etc/passwd</code> pour les utilisateurs et dans le fichier <code>/etc/group</code> pour les groupes.</p><h2>Gestion des permissions de fichiers</h2><h3>Comprendre les permissions de fichiers</h3><p>Sous Linux, les permissions de fichiers déterminent qui peut accéder et modifier les fichiers ou répertoires.<br>Les permissions sont accordées en fonction du propriétaire du fichier, du groupe associé au fichier, et des autres (tous les autres utilisateurs).<br>Ces permissions sont représentées sous trois types de base:</p><ul class=\"disc-list\"><li><strong>Lecture (r)</strong>: Autorise la visualisation du contenu d'un fichier ou la liste des fichiers d'un répertoire.</li><li><strong>Écriture (w)</strong>: Autorise la modification ou la suppression d'un fichier, ou l'ajout/suppression de fichiers dans un répertoire.</li><li><strong>Exécution (x)</strong>: Autorise l'exécution d'un fichier comme programme (pour les exécutables) ou l'accès à un répertoire (pour les répertoires).</li></ul><br><h3>Format des permissions de fichier</h3><p>Lorsque vous affichez les permissions d'un fichier avec la commande <code>ls -l</code>, le résultat commence par quelque chose comme:</p><pre><code><span>-rwxr-xr-xx</span></code></pre><p>La chaîne de permissions est composée de 10 caractères:</p><ul class=\"disc-list\"><li>Le premier caractère représente le type de fichier (les plus courants sont <code>-</code> pour les fichiers réguliers, <code>d</code> pour les répertoires et <code>l</code> pour un lien symbolique).</li><li>Les trois caractères suivants représentent les permissions du propriétaire (lecture, écriture et exécution).</li><li>Les trois suivants représentent les permissions du groupe.</li><li>Les trois derniers représentent les permissions des autres utilisateurs.</li></ul><p>Par exemple:</p><pre><code><span>-rwxr-xr-- 1 alice developers 1048576 Mar 24 12:00 file.txt</span></code></pre><p>Cela signifie:</p><ul class=\"disc-list\"><li><code>rwx</code> (permissions du propriétaire): Le propriétaire (<code>alice</code>) peut lire, écrire et exécuter le fichier.</li><li><code>r-x</code> (permissions du groupe): Les membres du groupe <code>developers</code> peuvent lire et exécuter le fichier, mais ne peuvent pas le modifier.</li><li><code>r--</code> (permissions des autres): Tous les autres peuvent uniquement lire le fichier.</li></ul><br><h3>Comprendre les permissions spéciales</h3><p>En plus des permissions standard de lecture, d'écriture et d'exécution, Linux inclut également des permissions spéciales qui contrôlent des comportements supplémentaires.<br>Celles-ci incluent:</p><ul class=\"disc-list\"><li><strong>Setuid (s)</strong>: Lorsqu'elle est définie sur un fichier exécutable, elle permet au programme de s'exécuter avec les privilèges du propriétaire du fichier, généralement utilisé pour les programmes nécessitant des privilèges root (<code>/bin/passwd</code>).<br>Exemple de <code>setuid</code>:<pre><code><span>-rwsr-xr-x 1 root root 12345 24 mars 12:00 /usr/bin/passwd</span></code></pre></li><li><strong>Setgid (s)</strong>: Lorsqu'elle est définie sur un répertoire, elle garantit que les fichiers créés dans le répertoire héritent du groupe du répertoire plutôt que du groupe principal de l'utilisateur.<br>Exemple de <code>setgid</code> sur un répertoire:<pre><code><span>drwxr-sr-x 2 root staff 4096 24 mars 12:00 /data/</span></code></pre></li><li><strong>Sticky bit (t)</strong>: Généralement utilisée sur les répertoires, la sticky bit garantit que seul le propriétaire du fichier ou l'utilisateur root peut supprimer ou renommer des fichiers dans ce répertoire, même si d'autres ont un accès en écriture.<br>Couramment utilisée sur le répertoire <code>/tmp</code>.<br>Exemple de sticky bit:<pre><code><span>drwxrwxrwt 2 root root 4096 24 mars 12:00 /tmp/</span></code></pre></li></ul><h2>En pratique</h2><h3>Ajouter des utilisateurs</h3><p>Pour ajouter un nouvel utilisateur au système, vous pouvez utiliser la commande <code>useradd</code>.<br>Voici la syntaxe de base:</p><pre><code><span>$ sudo useradd bob</span></code></pre><p>Cela crée un nouvel utilisateur avec les paramètres par défaut, qui incluent généralement:</p><ul class=\"disc-list\"><li>Un répertoire personnel (<code>/home/bob</code>)</li><li>Un shell (généralement <code>/bin/bash</code>)</li><li>Aucun mot de passe défini par défaut</li></ul><p>Vous pouvez spécifier des options supplémentaires lors de la création d'un utilisateur:</p><ul class=\"disc-list\"><li><code>-m</code>: Créer le répertoire personnel de l'utilisateur.</li><li><code>-s</code>: Spécifier le shell (<code>/bin/bash</code>, <code>/bin/zsh</code>).</li><li><code>-G</code>: Ajouter l'utilisateur à un ou plusieurs groupes.</li></ul><pre><code><span>$ sudo useradd -m -s /bin/bash bob</span></code></pre><br><h3>Définir un mot de passe pour un utilisateur</h3><p>Après avoir ajouté un utilisateur, vous devez définir un mot de passe.<br>Utilisez la commande <code>passwd</code> pour ce faire:</p><pre><code><span>$ sudo passwd bob</span></code></pre><p>Cette commande vous invitera à entrer un nouveau mot de passe pour l'utilisateur.</p><br><h3>Modifier des utilisateurs</h3><p>Vous pouvez modifier des utilisateurs existants avec la commande <code>usermod</code>.<br>Voici quelques options courantes:</p><ul class=\"disc-list\"><li><code>-aG</code>: Ajouter un utilisateur à un groupe supplémentaire (sans le retirer des autres groupes).</li><li><code>-s</code>: Changer le shell de l'utilisateur.</li><li><code>-d</code>: Changer le répertoire personnel de l'utilisateur.</li></ul><pre><code><span>$ sudo usermod -aG developers bob</span></code></pre><br><h3>Supprimer des utilisateurs</h3><p>Pour supprimer un utilisateur, vous pouvez utiliser la commande <code>userdel</code>.<br>Si vous souhaitez supprimer le répertoire personnel de l'utilisateur en même temps que son compte, utilisez l'option <br><code>-r</code>:</p><pre><code><span>$ sudo userdel -r bob</span></code></pre><br><h3>Ajouter des groupes</h3><p>Vous pouvez créer un nouveau groupe en utilisant la commande <code>groupadd</code>:</p><pre><code><span>$ sudo groupadd admins</span></code></pre><br><h3>Modifier des groupes</h3><p>Pour modifier un groupe existant, utilisez la commande <code>groupmod</code>.<br>Vous pouvez changer le nom du groupe avec l'option <code>-n</code> ou changer l'ID du groupe (GID) avec l'option <code>-g</code>.</p><pre><code><span>$ sudo groupmod -n developers devs</span><br><span>$ sudo groupmod -g 1010 devs</span></code></pre><br><h3>Supprimer des groupes</h3><p>Pour supprimer un groupe, utilisez la commande <code>groupdel</code>:</p><pre><code><span>$ sudo groupdel devs</span></code></pre><br><h3>Changer les permissions de fichiers avec <code>chmod</code></h3><p>La commande <code>chmod</code> vous permet de changer les permissions d'un fichier ou d'un répertoire.<br>Vous pouvez utiliser des modes symboliques ou numériques.</p><ul class=\"disc-list\"><li><strong>Mode symbolique</strong>: Ajoute <code>(+)</code>, supprime <code>(-)</code> ou définit <code>(=)</code> des permissions pour l'utilisateur, le groupe ou les autres:</li><pre><code><span>$ chmod u+x file.txt # Donner la permission d'exécution au propriétaire de file.txt</span><br><span>$ chmod g-w file.txt # Retirer la permission d'écriture pour le groupe sur file.txt</span><br><span>$ chmod o=r file.txt # Définir les permissions en lecture seule pour les autres sur file.txt</span></pre></code></li><li><strong>Mode numérique</strong>: Utilise des chiffres pour définir les permissions, où:<ul class=\"disc-list\"><li><strong>4</strong>: Lecture</li><li><strong>2</strong>: Écriture</li><li><strong>1</strong>: Exécution</li><li><strong>0</strong>: Aucune permission</li></ul><br>Vous pouvez additionner les valeurs pour définir les valeurs pour définir les permissions du propriétaire, du groupe et des autres.<br>Par exemple, <code>7</code> (lecture + écriture + exécution) pour le propriétaire, <code>5</code> (lecture + exécution) pour le groupe, et <code>5</code> (lecture + exécution) pour les autres:<pre><code><span>$ chmod 755 file.txt</span></code></pre></li></ul><br><h3>Changer le propriétaire et le groupe d'un fichier avec <code>chown</code></h3><p>La commande <code>chown</code> vous permet de changer le propriétaire et le groupe d'un fichier ou d'un répertoire.<br>La syntaxe de base est:</p><pre><code><span>$ sudo chown propriétaire:groupe fichier</span></code></pre><p>Exemples:</p><pre><code><span>$ sudo chown alice:developers file.txt # Change le propriétaire de file.txt en alice et le groupe en developers</span><br><span>$ sudo chown alice file.txt # Change le propriétaire de file.txt en alice mais laisse le groupe inchangé</span><br><span>$ sudo chown:admins file.txt # Change le groupe de file.txt en admins mais laisse le propriétaire inchangé</span></code></pre><br><h3>Changer le groupe d'un fichier avec <code>chgrp</code></h3><p>La commande <code>chgrp</code> vous permet de changer le groupe d'un fichier ou d'un répertoire.<br>La syntaxe est:</p><pre><code><span>$ sudo chgrp nom_du_groupe fichier</span></code></pre><p>Exemple:</p><pre><code><span>$ sudo chgrp staff file.txt</span></code></pre><br><h3>Meilleures pratiques pour la gestion des utilisateurs, des groupes et des permissions</h3><ul class=\"numbered-list\"><li><strong>Principe du moindre privilège</strong>: Accordez toujours le minimum de permissions nécessaires aux utilisateurs et aux groupes.<br>N'accordez pas aux utilisateurs des permissions d'écriture ou d'exécution à moins que cela ne soit absolument nécessaire.</li><li><strong>Utilisez les groupes efficacement</strong>: Regroupez les utilisateurs par rôle (<code>admins</code>, <code>developers</code>, <code>users</code>) et attribuez des permissions aux groupes plutôt qu'aux utilisateurs individuels.<br>Cela simplifie la gestion des permissions.</li><li><strong>Audits réguliers</strong>: Passez en revue périodiquement les comptes utilisateurs, les appartenances aux groupes et les permissions des fichiers pour vous assurer qu'aucun accès inutile n'est accordé.<br>Cela aide à améliorer la sécurité.</li><li><strong>Utilisez <code>sudo</code> pour les privilèges élevés</strong>: Évitez de donner aux utilisateurs un accès direct au compte root.<br>Configurez plutôt <code>sudo</code> pour accorder des privilèges élevés temporaires lorsque cela est nécessaire.</li></ul><h2>Conclusion</h2><p>La gestion des utilisateurs, des groupes et des permissions de fichiers est fondamentale pour garantir que votre système Linux reste organisé et sécurisé.<br>En utilisant des commandes telles que <code>useradd</code>, <code>usermod</code>, <code>userdel</code>, <code>chmod</code>, <code>chown</code> et <code>chgrp</code>, vous pouvez facilement contrôler qui a accès à quoi sur votre système.<br>Suivez toujours les meilleures pratiques en matière de sécurité et examinez régulièrement vos configurations pour vous assurer que le principe du moindre privilège est maintenu.</p>"
}
