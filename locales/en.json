{
    "title": "Maximilien Nadji - Freelance Linux System Administrator",
    "about": "About",
    "index": {
        "title": "Who am I?",
        "presentation": "<p>My name is Maximilien Nadji, and I am a freelance Linux System Administrator embracing the DevOps philosophy.<br>I maintain a <a href=\"/blog\">blog</a> containing articles on freelancing, Linux, and DevOps, where I share insights</p>",
        "services": "<ul class=\"services-list\"><li><b>User & Group Management:</b> Create, configure, and manage local user accounts, group permissions, resource limits, and ACLs.</li><li><b>Job Scheduling & Automation:</b> Manage and schedule recurring tasks and command executions.</li><li><b>Disk & Storage Management:</b> Configure and manage disk partitions, LVM storage, swap space, filesystems, and automounting.</li><li><b>System Recovery:</b> Efficiently recover from hardware, OS, or filesystem failures.</li><li><b>Network Configuration:</b> Set up packet filtering, IPv4/IPv6 networking, port redirection, NAT, static/dynamic routing, and SSH access.</li><li><b>Security & Compliance Audits:</b> Assess system security, performance, and compliance through detailed audits.</li><li><b>Reverse Proxy & Load Balancing:</b> Implement and configure reverse proxies and load balancers (Nginx, Traefik).</li><li><b>Software Deployment & Management:</b> Deploy, configure, and maintain software installations, updates, and core services.</li><li><b>Containerization & Orchestration:</b> Configure Docker/Podman, manage Kubernetes clusters, and orchestrate container deployments.</li><li><b>CI/CD Automation:</b> Automate application deployment pipelines using continuous integration and delivery tools.</li><li><b>Performance Monitoring:</b> Real-time monitoring of system performance with tools like Prometheus and Grafana.</li></ul>",
        "contact": "<h2>Interested in discussing your needs?</h2>Schedule <a class=\"contact\" href=\"https://calendly.com/maximiliennadji/30min\"> an appointment directly <\/a> or <a class=\"contact\" href=\"https://www.linkedin.com/in/maximilien-nadji/\"> contact me on LinkedIn <\/a> to discuss further."
    },
    "about_page": {
        "title": "More on who am I?",
        "content": "<p>My first steps in computing were in middle school where I had learned the basics of web programming.<br>It had become a hobby where I continued to consolidate my acquired skills, from the creation of static websites to the creation of dynamic websites.</p><p>I started using Linux by joining Epitech. The first Linux system I had installed was Fedora 31.<br>With it, I learned programming in C, in C++, in Python, and of course creating Bash scripts.</p><p>I started to specialized in Linux system administration during my previous work, where I was a DevOps consultant.<br>I had the opportunity to take an on-site training course covering the basics and advanced notions, and I felt in my element.<br>Following this training, to confirm my Linux system administration skills, I decided to take the <a href=\"https://training.linuxfoundation.org/certification/linux-foundation-certified-sysadmin-lfcs/\"> LFCS <\/a> certification which I obtained with <a href=\"https://ti-user-certificates.s3.amazonaws.com/e0df7fbf-a057-42af-8a1f-590912be5460/53be41b8-832e-4e79-a468-64e10b056c27-maximilien-nadji-d2b2531b-484a-44d6-87c5-4fcdd2eddc79-certificate.pdf\"> success <\/a>.</p><p>I dedicated my spare time to continuous learning, keeping my skills sharp and striving toward Linux mastery.</p>"
    },
    "blog_index": {
        "brr": "Backup, Restore and Recovery on Linux",
        "usb": "How to Create a Bootable USB on Linux?",
        "linux": "What is Linux?",
        "freelance": "Why freelance?"
    },
    "linux_article": {
        "title": "What is Linux?",
        "content": "<p>Linux is not an operating system but a kernel, a set of softwares being the main layer between the machine and the operating system.<br>The kernel will be responsible for the following tasks: </p><ul class= \"disc-list\"><li> Managing the machine's memory </li> <li> Managing devices (keyboards, mouses, screens, hard disks) </li> <li> Handling processes corresponding to commands currently running on the system </li> <li> And much more! </li></ul> <br> <img class=\"schema\" src=\"../../static/images/kernel.svg\"><br><br><h2>What is a Linux system, then?</h2><p>A Linux system (called Linux distribution) will therefore correspond to an operating system based on the Linux kernel but with additional components such as: </p><ul class=\"disc-list\"><li> A packet manager (APT, DNF) to install, update or delete softwares </li> <li> A graphical environment (GNOME, KDE) </li> <li> A terminal command shell (Bash, Zsh) </li> <li> And more ! </li></ul> <br> <img class=\"schema\" src=\"../../static/images/linux-system.svg\"><h2>Conclusion</h2><p>The key difference is that Linux is just the kernel, while a Linux System includes everything needed for a fully functioning operating system.<br>A Linux System is what users typically interact with, whereas Linux alone cannot be used directly by end-users without additional software.</p>"
    },
    "usb_article": {
        "title": "How to Create a Bootable USB on Linux?",
        "content": "<p>A bootable USB is a USB drive that contains an operating system (OS) or utility that you can boot your computer from.<br>This can be used to install an OS, run recovery tools, or try out a Linux distribution without installing it on your computer.<br><br>A Live USB is a subset of a bootable USB where the OS runs directly from the USB without being installed on the computer's hard drive.<br><br>On this article, you are going to explore three different methods for creating a bootable USB on Linux.<br>Each method has its own benefits and use cases, so read on to find the best approach for your needs !</p><br><h3>Method 1 : <code>dd</code> (Command-Line Method)</h3><p><code>dd</code> is a powerful, built-in command-line tool available in most Linux distributions.<br>It can be used to create a bootable USB by copying the ISO file of an operating system directly to the USB drive.<br>While it's quick and efficient, caution is needed, as the <code>dd</code> command can easily overwrite data if the wrong device is selected.</p><h4>Steps:</h4><ul class=\"numbered-list\"><li><b>Identify your USB drive:</b> Run the following command to list your devices: <pre><code><span>$ lsblk</span></code></pre></li><li><b>Unmount the USB drive (if necessary):</b> <pre><code><span>$ sudo umount /dev/sdX1 # Replace /dev/sdX1 with the correct USB partition</span></code></pre></li><li><b>Run the <code>dd</code> command:</b> Replace <code>/path/to/your.iso</code> with the path to your ISO and <code>/dev/sdX</code> with the correct device path for your USB: <pre><code><span>$ sudo dd if=/path/to/your.iso of=/dev/sdX bs=4M status=progress oflag=sync</span></code></pre></li><li><b>Eject the USB drive:</b> <pre><code><span>$ sudo eject /dev/sdX</span></code></pre></li></ul><h4>Pros:</h4><ul class=\"disc-list\"><li>No additional software required.</li><li>Flexible and fast.</li></ul><h4>Cons:</h4><ul class=\"disc-list\"><li>Risk of overwriting data if the wrong device is selected.</li><li>Command-line only, no graphical interface.</li></ul><br><h3>Method 2 : balenaEtcher (Graphical Interface)</h3><p><a href=\"https://etcher.balena.io/\">balenaEtcher</a> is a popular, easy-to-use tool with a graphical interface.<br>It's perfect for beginners or those who prefer not to use the terminal.<br>balenaEtcher simplifies the process of creating a bootable USB and ensures that the process is safe by verifying the image.</p><h4>Steps:</h4><ul class=\"numbered-list\"><li><b>Download and Install balenaEtcher:</b> Go to the <a href=\"https://etcher.balena.io/\">balenaEtcher website</a> and download appropriate version for your Linux distribution.</li><li><b>Launch balenaEtcher:</b> Open the application after installation.</li><li><b>Select the ISO file:</b> Click on the \"Flash from file\" button and choose your ISO file.</li><li><b>Select your USB drive:</b> Ensure that the correct USB device is selected.</li><li><b>Click on \"Flash!\":</b> balenaEtcher will now create the bootable USB drive.</li></ul><h4>Pros:</h4><ul class=\"disc-list\"><li>User-friendly and visually intuitive.</li><li>Cross-platform (works on Linux, MacOS and Windows).</li><li>Verifies the flash process for errors.</li></ul><h4>Cons:</h4><ul class=\"disc-list\"><li>Requires installation.</li><li>Slower than <code>dd</code>.</li></ul><br><h3>Method 3: Ventoy (Multi-ISO USB Tool)</h3><p><a href=\"https://www.ventoy.net/en/index.html\">Ventoy</a> is a powerfull tool that allows you to create a bootable USB drive with multiple operating systems.<br>Instead of writing an ISO directly to the USB, Ventoy installs a bootloader on the USB.<br>You can then drag and drop as many ISO files as you like onto the drive, and choose which one to boot from when you start up your computer.</p><h4>Steps:</h4><ul class=\"numbered-list\"><li><b>Download and Install Ventoy:</b> Go to the <a href=\"https://www.ventoy.net/en/index.html\">Ventoy website</a> and download the Linux version of Ventoy.</li><li><b>Install Ventoy to your USB drive:</b> Extract the files and run the following command to install Ventoy onto the USB drive: <pre><code><span>$ sudo ./Ventoy2Disk.sh -i /dev/sdX</span></code></pre></li><li><b>Copy ISO files to the USB drive:</b> Simply drag and drop your ISO files onto the USB.</li><li><b>Boot from the USB:</b> When you reboot, Ventoy will display a boot menu, allowing you to choose which ISO to boot.</li></ul><h4>Pros:</h4><ul class=\"disc-list\"><li>Allows multiple ISOs on one USB drive.</li><li>No need to reformat the USB for each new ISO.</li><li>Can be used for testing or running multiple OSes.</li></ul><h4>Cons:</h4><ul class=\"disc-list\"><li>Requires some initial setup.</li><li>May be overkill if you only need a single OS on the USB.</li></ul><br><h3>Which Method Should You Choose?</h3><p>Each method has its own strengths, and the best choice depends on your needs:</p><ul class=\"disc-list\"><li>Use <code>dd</code> if you prefer a command-line approach and need a fast, no-frills solution.</li><li>Use balenaEtcher if you want an easy-to-use graphical tool with built-in error checking.</li><li>Use Ventoy if you want the flexibility to have multiple ISOs on a single USB and need a bootable USB that can serve multiple purposes.</li></ul><h2>Conclusion</h2><p>Creating a bootable USB on Linux can be done in several ways, each offering its own set of advantages.<br>Whether you’re installing a new OS, running recovery tools, or testing out a distro, these three methods provide you with all the options you need.</p>"
    },
    "brr_article": {
        "title": "Backup, Restore and Recovery on Linux",
        "content": "<p>Data is one of the most valuable assets for individuals and businesses alike.<br>Losing critical data due to system failures, cyberattacks, or accidental deletions can have severe consequences.<br>That’s why understanding the processes of backup, restore, and recovery is crucial for safeguarding data and ensuring business continuity.<br>While these terms are often used interchangeably, they serve distinct purposes in data management.<br>In this article, you are going to explore the differences between these three processes and why each one is essential.</p><h2>Backup : The First Line Of Defense</h2><p>Backup is the process of creating copies of data to protect against loss or corruption.<br>Backups ensure that, in the event of an issue, you have an accessible copy of your data stored safely.<br><br>Two examples of how to create a backup without and with encryption:</p><pre><code><span>$ tar -czvf my_backup_$(date +%F_%H-%M-%S) /home/user/documents</span><br><span>$ tar -czvf - /home/user/documents | gpg --symmetric --cipher-algo AES256 -o my_backup_$(date +%F_%H-%M-%S).tar.gz.gpg</span></code></pre><h2>Restore: Bringing Back Lost Data</h2><p>Restoring is the process of retrieving backup data and making it available for use again.<br>It is the action taken when data has been lost, corrupted, or accidentally deleted.<br><br>If you want to decrypt and extract your previous backup, here's how to do it: </p><pre><code><span>$ gpg --output backup_2025-02-18_15-45-00.tar.gz --decrypt backup_2025-02-18_15-45-00.tar.gz.gpg</span><br><span>$ tar -xzvf backup_2025-02-18_15-45-00.tar.gz</span></code></pre><h2>Recovery: Restoring Systems to Normal Operations</h2><p>Recovery goes beyond restoring files; it involves getting an entire system or environment back to operational status after a major failure, such as a cyberattack, hardware failure, or disaster.<br><br> Let's assume your system has crashed, and you have a backup of your entire system called <code>full_system_backup_2025-02-18_10-30-25.tar.gz.gpg</code> located on an external media <code>/mnt/backup</code>.<br>Here's how to do it step by step:</p><br><h3>Step 1 : Boot from Live CD/USB</h3><p>You need to boot into a Linux live environment because it lets you mount your disk without it being in use, ensuring a clean recovery without conflicts.<br><a href=\"/blog/bootable-usb\"> Here's how to create a Linux live USB</a></p><br><h3>Step 2 : Mount the Filesystems</h3><p>Once booted, you open a terminal and you mount the partitions of the target system (where you want to recover the backup to).<br><p>The <code>lsblk</code> command will help you find the disk where Linux was installed (we will assume that your root filesystem is <code>/dev/sda1</code>): </p><pre><code>$ sudo mount /dev/sda1 /mnt</code></pre><p>If <code>/home</code>, <code>/boot</code> partitions exist, mount them too: </p><pre><code><span>$ sudo mkdir -p /mnt/home && sudo mount /dev/sda2 /mnt/home</span><br><span>$ sudo mkdir -p /mnt/boot && sudo mount /dev/sda3 /mnt/boot</span></code></pre><p>You need to mount your Live CD/USB to make accessible your backup file: </p><pre><code><span>$ sudo mount /dev/sdb1 /mnt/backup # Replace /dev/sdb1 with the correct CD/USB partition</span></code></pre><br><h3>Step 3 : Decrypt the Backup (If Encrypted)</h3><p>Remember, in your case, your backup <code>full_system_backup_2025-02-18_10-30-25.tar.gz.gpg</code> is encrypted.<br>Here's how to decrypt it: </p><pre><code><span>$ gpg --output /mnt/backup/full_system_backup_2025-02-18_10-30-25.tar.gz --decrypt /mnt/backup/full_system_backup_2025-02-18_10-30-25.tar.gz.gpg</span></code></pre>You will be prompted for the passphrase used to encrypt the backup.</p><br><h3>Step 4 : Restore the System Backup</h3><p>Once the backup is decrypted (or if it's already in .tar.gz format), you can restore it using <code>tar</code>.<br>Use <code>tar</code> with the <code>--exclude</code> option to avoid overwriting your current mount points like <code>/mnt</code>,<code>/proc</code>,<code>/sys</code>, or <code>/dev</code>.<br>Here's how to do it: </p><pre><code><span>$ sudo tar -xzpf /mnt/backup/full_system_backup_2025-02-18_10-30-25.tar.gz -C /mnt --exclude=/mnt --exclude=/proc --exclude=/sys --exclude=/dev</span></code></pre><h4>Explanation:</h4><ul class=\"disc-list\"><li><code>-x</code> - Extract files.</li><li><code>-z</code> - Uncompress the <code>.tar.gz</code> file.</li><li><code>-p</code> - Preserve permissions.</li><li><code>-f /mnt/backup/full_system_backup_2025-02-18_10-30-25.tar.gz</code> - The backup file to restore from.</li><li><code>-C /mnt</code> - This specifies the target directory (the root of your system, mounted at /mnt).</li><li><code>--exclude=/mnt --exclude=/proc --exclude=/sys --exclude=/dev</code> - Prevents overwriting system directories or special files that should not be restored from the backup.</li></ul><br><h3>Step 5 : Restore Bootloader (if necessary)</h3><p>If you restored the system to a new disk, you may need to restore the bootloader (GRUB) to make the system bootable.<br>Here's how to reinstall GRUB (assuming the root partition is still <code>/dev/sda1</code>): </p><pre><code><span>$ sudo mount --bind /dev /mnt/dev</span><br><span>$ sudo mount --bind /proc /mnt/proc</span><br><span>$ sudo mount --bind /sys /mnt/sys</span><br><span>$ sudo chroot /mnt</span><br><span>$ grub-install /dev/sda # Install GRUB to the MBR of the disk</span><br><span>$ update-grub # Update GRUB's bootloader configuration</span><br><span>$ exit</span></code></pre><br><h3>Step 6 : Reboot the System</h3><p>After recovering the system and installing the bootloader, you should be able to reboot into your recovered system.<br>First, you unmount all the partitions: </p><pre><code><span>$ sudo umount /mnt/boot /mnt/home /mnt/dev /mnt/proc /mnt/sys /mnt/backup /mnt</span></code></pre><p>Then you eject the Live CD/USB: </p><pre><code><span>$ sudo eject /dev/sdb # Replace with the correct CD/USB device</span></code></pre><p>Now, you remove physically the live CD/USB and you reboot the system: </p><pre><code><span>$ sudo reboot</span></code></pre><br><h3>Step 7 : Verify Recovery</h3><p>After rebooting, you can check if everything is restored:</p> <pre><code><span>$ ls /home</span><br><span>$ df -h</span></code></pre><p>Congratulations! You have successfully recovered your Linux system !</p><h2>Conclusion</h2><p>Understanding the distinctions between backup, restore, and recovery helps organizations implement effective data protection strategies.<br>By ensuring that backups are reliable, restores are tested, and recovery plans are in place, businesses can minimize downtime and data loss in the face of unexpected disruptions.</p>",
        "conclusion": "<p>Does your business have a solid backup, restore, and recovery strategy?<br>If not, let's discuss it to implement one !</p>"
    }
}
