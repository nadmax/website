{
    "title": "User, Group & File Permissions Management on Linux",
    "date": "2025-03-24",
    "content": "<p>In any Linux system, whether it's a server, desktop or virtual machine, managing users and groups is essential for ensuring system security, organization, and control.<br>By default, every Linux system operates under a multi-user paradigm, which means different people or services can access the system at the same time.<br>To maintain system integrity, Linux uses user and group management mechanisms that help assign permissions, track access, and organize users in a way that makes it easier to handle large systems efficiently.</p><p>On this article, you will walk through the core concepts and pratical steps involved in user and group management on Linux systems.<br>You will look at how to create and modify users and groups, assign permissions, and follow best practices to maintain a secure and well-organized system.</p><h2>Understanding Linux Users and Groups</h2><h3>What are users in Linux?</h3><p>In Linux, a user refers to any account that can perform operations.<br>Every user is uniquely identified by a <strong>User ID (UID)</strong>, which is a numerical value that the system uses to reference that user.<br>The main purpose of users is to segregate access rights and permissions.<br>There are two main types of users:</p><ul class=\"disc-list\"><li><strong>System users</strong>: These are special accounts created by the system to run services or manage system tasks (<code>root</code>, <code>www-data</code>, <code>sys</code>, etc.)<br>System users typically don't have login access but can own files or execute background processes.</li><li><strong>Regular users</strong>: These are the typical users of the system who have login access, a home directory and the ability to create files and run programs.</li></ul><p>In most Linux distributions, when a user is created, they're given a home directory (like <code>/home/newuser</code>) and a default shell (like <code>/bin/bash</code>).</p><br><h3>What are groups in Linux?</h3><p>A group in Linux is a collection of users.<br>Groups are used to organize users in a way that simplifies permission management.<br>Each user can belong to one or more groups, and every file or resource on a Linux system is assigned a group and an owner.<br>When managing file permissions, it becomes easy to grant a set of users (those in a group) access to certain files without specifying each user individually.<br>There are two categories of groups:</p><ul class=\"disc-list\"><li><strong>Primary group</strong>: Every user belongs to one primary group.<br>This group is usually created when the user is created and, unless specified, typically shares the same name as the user (a user <code>alice</code> will have a primary group named <code>alice</code>).</li><li><strong>Secondary groups</strong>: A user can belong to multiple additional groups giving the user additional permissions for specific resources or tasks.</li></ul><p>For example, a user might be part of a <code>developers</code>group that allows them access to a particular directory or set of files.<br>This makes managing access more efficient than dealing with individual permissions for each user.</p><br><h3>Understanding User and Group IDs</h3><p>I explained earlier, that each user is uniquely identified by a numeric identifier <strong>(UID)</strong>.<br>The same applies to groups <strong>(GID)</strong>.<br>Here's how it works:</p><ul class=\"disc-list\"><li><strong> User ID (UID)</strong>: A unique identifier assigned to each user.<br>The <code>root</code> user has UID 0, and regular users usually start from UID 1000 onward.</li><li><strong>Group ID (GID)</strong>: Similarly, every group has a unique identifier.<br>A user's primary group also has its own GID.</li></ul><p>The mapping between users, groups, and UIDs/GIDs is stored in the <code>/etc/passwd</code> file for users and the <code>/etc/group</code> file for groups.</p><h2>Managing File Permissions</h2><h3>Understanding File Permissions</h3><p>In Linux, file permissions determine who can access and modify files or directories.<br>Permissions are granted based on the owner of the file, the group associated with the file, and others (everyone else).<br>These permissions are represented in three basic types:</p><ul class=\"disc-list\"><li><strong>Read (r)</strong>: Grants the ability to view the contents of a file or list the contents of a directory.</li><li><strong>Write (w)</strong>: Grants the ability to modify or delete a file, or add/delete files from a directory.</li><li><strong>Execute (x)</strong>: Grants the ability to run a file as a program (for executables) or enter a directory (for directories).</li></ul><br><h3>File Permission Format</h3><p>When you view a file's permissions using the <code>ls -l</code> command, the output will start with something like this:</p><pre><code><span>-rwxr-xr-xx</span></code></pre><p>The permissions string is made up of 10 characters:</p><ul class=\"disc-list\"><li>The first character represents the file type. (the most commons are <code>-</code> for regular file, <code>d</code>for directories</code> and <code>l</code> for a symbolic link).</li><li>The next three characters represent the owner's permissions (read, write and execute).</li><li>The following three characters represent the group's permissions.</li><li>The final three characters represent others permissions.</li></ul><p>For example:</p><pre><code><span>-rwxr-xr-- 1 alice developers 1048576 Mar 24 12:00 file.txt</span></code></pre><p>This means:</p><ul class=\"disc-list\"><li><code>rwx</code> (owner permissions): The owner (<code>alice</code>) can read, write, and execute the file.</li><li><code>r-x</code> (group permissions): Members of the <code>developers</code> group can read and execute the file, but they can't modify it.</li><li><code>r--</code> (others permissions): Everyone else can only read the file.</li></ul><br><h3>Understanding Special Permissions</h3><p>Besides the standard read, write, and execute permissions, Linux also includes special permissions that control additional behaviors.<br>These include:</p><ul class=\"disc-list\"><li><strong>Setuid (s)</strong>: When set on an executable file, it allows the program to run with the privileges of the file's owner, typically used for programs that need root privileges (<code>/bin/passwd</code>).<br>Example of <code>setuid</code>:<pre><code><span>-rwsr-xr-x 1 root root 12345 Mar 24 12:00 /usr/bin/passwd</span></code></pre></li><li><strong>Setgid (s)</strong>: When set on a directory, it ensures that files created within the directory inherit the group of the directory rather than the user's primary group.<br>Example of <code>setgid</code> on a directory:<pre><code><span>drwxr-sr-x 2 root staff 4096 Mar 24 12:00 /data/</span></code></pre></li><li><strong>Sticky bit (t)</strong>: Typically used on directories, the sticky bit ensures that only the file's owner or the root user can delete or rename files within that directory, even if others have write access.<br>Commonly used on the <code>/tmp</code> directory.<br>Example of sticky bit:<pre><code><span>drwxrwxrwt 2 root root 4096 Mar 24 12:00 /tmp/</span></code></pre></li></ul><h2>In Practice</h2><h3>Adding Users</h3><p>To add a new user to the system, you can use the <code>useradd</code> command.<br>Here's the basic syntax:</p><pre><code><span>$ sudo useradd bob</span></code></pre><p>This creates a new user with the default settings, which typically includes:</p><ul class=\"disc-list\"><li>A home directory (<code>/home/john</code>)</li><li>A shell (usually <code>/bin/bash</code>)</li><li>No password set by default</li></ul><p>You can specify additional options when creating a user:</p><ul class=\"disc-list\"><li><code>-m</code>: Create the user's home directory.</li><li><code>-s</code>: Specify the shell (<code>/bin/bash</code>, <code>/bin/zsh</code>).</li><li><code>-G</code>: Add the user to one or more groups.</li></ul><pre><code><span>$ sudo useradd -m -s /bin/bash bob</span></code></pre><br><h3>Setting a Password for a User</h3><p>After adding a user, you should set a password.<br>Use the <code>passwd</code> command to do so:</p><pre><code><span>$ sudo passwd bob</span></code></pre><p>This command will prompt you to enter a new password for the user.</p><br><h3>Modifying Users</h3><p>You can modify existing users with the <code>usermod</code> command.<br>Here are some common options:</p><ul class=\"disc-list\"><li><code>-aG</code>: Add a user to an additional group (without removing them from other groups).</li><li><code>-s</code>: Change the user's shell.</li><li><code>-d</code>: Change the user's home directory</li></ul><pre><code><span>$ sudo usermod -aG developers bob</span></code></pre><br><h3>Deleting Users</h3><p>To delete a user, you can use the <code>userdel</code> command.<br>If you want to remove the user's home directory along with their account, use the <code>-r</code> option:</p><pre><code><span>$ sudo userdel -r bob</span></code></pre><br><h3>Adding Groups</h3><p>You can create a new group using the <code>groupadd</code> command:</p><pre><code><span>$ sudo groupadd admins</span></code></pre><br><h3>Modifying Groups</h3><p>To modify an existing group, use the <code>groupmod</code> command.<br>You can change the group name with the <code>-n</code> or change the group ID (GID) with the <code>-g</code>option.</p><pre><code><span>$ sudo groupmod -n developers devs</span><br><span>$ sudo groupmod -g 1010 devs </span></code></pre><br><h3>Deleting Groups</h3><p>To remove a group, use the <code>groupdel</code> command:</p><pre><code><span>$ sudo groupdel devs</span></code></pre><br><h3>Changing File Permissions with <code>chmod</code></h3><p>The <code>chmod</code> command allows you to change file or directory permissions.<br>You can use symbolic or numeric modes.</p><ul class=\"disc-list\"><li><strong>Symbolic Mode</strong>: Adds <code>(+)</code>, removes <code>(-)</code>, or sets <code>(+)</code> permissions for the user, group, or others:</p><pre><code><span>$ chmod u+x file.txt # Give execute permission to the owner of file.txt</span><br><span>$ chmod g-w file.txt # Remove write permission for the group on file.txt</span><br><span>$ chmod o=r file.txt # Set read-only permissions for others on file.txt</span></pre></code></li><li><strong>Numeric Mode</strong>: Uses numbers to define permissions, where:<ul class=\"disc-list\"><li><strong>4</strong>: Read</li><li><strong>2</strong>: Write</li><li><strong>1</strong>: Execute</li><li><strong>0</strong>: No permission</li></ul><br>You can add up the values to set the permissions for owner, group, and others.<br>For example, <code>7</code> (read + write + execute) for the owner, <code>5</code> (read + execute) for the group, and <code>5</code> (read + execute) for others:<pre><code><span>$ chmod 755 file.txt</span></code></pre></li></ul><br><h3>Changing File Owner and Group with <code>chown</code></h3><p>The <code>chown</code> command allows you to change the owner and group of a file or directory.<br>The basic syntax is:</p><pre><code></span>$ sudo chown owner:group filename</span></code></pre><p>Examples:</p><pre><code><span>$ sudo chown alice:developers file.txt # Change the owner of file.txt to alice and the group to developers</span><br><span>$ sudo chown alice file.txt # Change the owner of file.txt to alice but leave the group unchanged</span><br><span>$ sudo chown :admins file.txt # Change the group of file.txt to admins but leave the owner unchanged</span></code></pre><br><h3>Changing Group Ownership with <code>chgrp</code></h3><p>The <code>chgrp</code> command allows you to change the group of a file or directory.<br>The syntax is:</p><pre><code><span>$ sudo chgrp groupname filename</span></code></pre><p>Example:</p><pre><code><span>$ sudo chrgp staff file.txt</span></code></pre><br><h3>Best Practices for Managing Users, Groups, and Permissions</h3><ul class=\"disc-list\"><li><strong>Least Privilege Principle</strong>: Always grant the minimum necessary permissions to users and groups.<br>Don't give users write or execute permissions unless absolutely needed.</li><li><strong>Use Groups Effectively</strong>: Group users by role (<code>admins</code>, <code>developers</code>, <code>users</code>) and assign permissions to groups instead of individual users.<br>This simplifies permission management.</li><li><strong>Regular Audits</strong>: Periodically review user accounts, group memberships, and file permissions to ensure that no unnecessary access is granted.<br>This helps improve security</li><li><strong>Use <code>sudo</code> for Elevated Privileges</strong>: Avoid giving users direct root access.<br>Instead, configure <code>sudo</code> to grant temporary elevated privileges when needed.</li></ul><h2>Conclusion</h2><p>Managing users, groups, and file permissions is fundamental to ensuring that your Linux system remains organized and secure.<br>By using commands like <code>useradd</code>, <code>usermod</code>, <code>userdel</code>, <code>chmod</code>, <code>chown</code>, and <code>chgrp</code>, you can easily control who has access to what on your system.<br>Always follow best practices for security and regularly review your configurations to ensure that the principle of least privilege is maintained.</p>"
}